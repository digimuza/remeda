{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.12.0",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "ts-prime!",
  "docComment": "",
  "name": "ts-prime",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "ts-prime!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!allPass:function(1)",
          "docComment": "/**\n * Determines whether all predicates returns true for the input data.\n *\n * @param data - The input data for predicates.\n *\n * @param fns - The list of predicates.  @signature P.allPass(data, fns)  @signature P.allPass(fns)(data)\n *\n * @example\n *\n * const isDivisibleBy3 = (x: number) => x % 3 === 0 const isDivisibleBy4 = (x: number) => x % 4 === 0 const fns = [isDivisibleBy3, isDivisibleBy4] P.allPass(12, fns) // => true P.allPass(8, fns) // => false  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function allPass<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fns: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<(data: T) => boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fns",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "allPass"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!allPass:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function allPass<T>(fns: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<(data: T) => boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: T) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fns",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "allPass"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!anyPass:function(1)",
          "docComment": "/**\n * Determines whether any predicate returns true for the input data.\n *\n * @param data - item\n *\n * @param fns - The list of predicates.  @signature P.anyPass(data,fns)  @signature P.anyPass(fns)(data)\n *\n * @example\n *\n * const isDivisibleBy3 = (x: number) => x % 3 === 0 const isDivisibleBy4 = (x: number) => x % 4 === 0 const fns = [isDivisibleBy3, isDivisibleBy4] P.anyPass(fns)(8) // => true P.anyPass(fns)(11) // => false  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPass<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fns: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<(data: T) => boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fns",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "anyPass"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!anyPass:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPass<T>(fns: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<(data: T) => boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: T) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fns",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "anyPass"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!ArgsType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ArgsType<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: infer U) => any ? U : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ArgsType",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!assertError:function(1)",
          "docComment": "/**\n * Assertion statement\n *\n * @throws\n *\n * Throws if data is instance of error  @export const request = () => P.canFail(()=> axios.get(url)) const result = await request.then(P.assertError)  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertError<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assertError"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!base64decode:function(1)",
          "docComment": "/**\n * Decode base64 encoded string.  @signature P.base64decode(str)\n *\n * @example\n *\n * P.base64decode(\"dHMtcHJpbWUgaXMgYXdlc29tZQ==\") //=> ts-prime is awesome  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function base64decode(input: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "base64decode"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!base64encode:function(1)",
          "docComment": "/**\n * Encode string with base64 encoding.  @signature P.base64encode(str)\n *\n * @example\n *\n * P.base64encode(\"ts-prime is awesome\") //=> dHMtcHJpbWUgaXMgYXdlc29tZQ==  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function base64encode(input: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "base64encode"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!cache:function(1)",
          "docComment": "/**\n * Function middleware that caches function output based on input\n *\n * @param fn - target function\n *\n * @param cacheFn - function that receives and return cache key  @signature P.cache(fn, options)  @signature P.cache(options)(fn)\n *\n * @example\n *\n * const request = (url: string) => axios.get(url) const requestWithCache = P.cache(request, (url) => url)  @category Utility, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cache<I extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "CacheOptions",
              "canonicalReference": "ts-prime!CacheOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ArgsType",
              "canonicalReference": "ts-prime!ArgsType:type"
            },
            {
              "kind": "Content",
              "text": "<I>, "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<I>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "cache"
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!CacheMechanism:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CacheMechanism<R> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CacheMechanism",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!CacheMechanism#get:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get: "
                },
                {
                  "kind": "Content",
                  "text": "(key: string) => R | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!CacheMechanism#set:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set: "
                },
                {
                  "kind": "Content",
                  "text": "(key: string, data: R) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "set",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!CacheOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CacheOptions<I extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ", R> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CacheOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!CacheOptions#cacheKeyFn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cacheKeyFn?: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: I) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cacheKeyFn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!CacheOptions#cacheMechanism:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cacheMechanism?: "
                },
                {
                  "kind": "Reference",
                  "text": "CacheMechanism",
                  "canonicalReference": "ts-prime!CacheMechanism:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cacheMechanism",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!canFail:function(1)",
          "docComment": "/**\n * Similar to try catch statement. If function throws insisted callback this function will return `Error` instance\n *\n * @example\n *\n * const err = P.canFail(()=> JSON.parse(data)) if (P.isError(err)) { console.log(err) }\n *\n * const request = await canFail(() => axios.get(url)) if (P.isError(request)) return  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function canFail<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CanGetError",
              "canonicalReference": "ts-prime!CanGetError:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "canFail"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!canFail:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function canFail<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "() => T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CanGetError",
              "canonicalReference": "ts-prime!CanGetError:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "canFail"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!CanGetError:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CanGetError<T> = "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CanGetError",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!capitalize:function(1)",
          "docComment": "/**\n * Capitalize first letter of word\n *\n * @param str - Any string  @signature P.capitalize(str)\n *\n * @example\n *\n * P.capitalize(\"tom\") //=> Tom  @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function capitalize(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "capitalize"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!chunk:function(1)",
          "docComment": "/**\n * Split an array into groups the length of `size`. If `array` can't be split evenly, the final chunk will be the remaining elements.\n *\n * @param array - the array\n *\n * @param size - the length of the chunk  @signature P.chunk(array, size)  @signature P.chunk(size)(array)\n *\n * @example\n *\n * P.chunk(['a', 'b', 'c', 'd'], 2) // => [['a', 'b'], ['c', 'd']] P.chunk(['a', 'b', 'c', 'd'], 3) // => [['a', 'b', 'c'], ['d']] P.chunk(2)(['a', 'b', 'c', 'd']) // => [['a', 'b'], ['c', 'd']] P.chunk(3)(['a', 'b', 'c', 'd']) // => [['a', 'b', 'c'], ['d']]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function chunk<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", size: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly T[][]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "size",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chunk"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!chunk:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function chunk<T>(size: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => readonly T[][]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "size",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chunk"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!clamp:function(1)",
          "docComment": "/**\n * Clamp the given value within the inclusive min and max bounds.\n *\n * @param value - the number\n *\n * @param limits - the bounds limits  @signature P.clamp(value, { min, max });  @signature P.clamp({ min, max })(value);\n *\n * @example\n *\n * P.clamp(10, { min: 20 }) // => 20 P.clamp(10, { max: 5 }) // => 5 P.clamp(10, { max: 20, min: 5 }) // => 10\n *\n * P.clamp({ min: 20 })(10) // => 20 P.clamp({ max: 5 })(10) // => 5 P.clamp({ max: 20, min: 5 })(10) // => 10  @category Number, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clamp(value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", limits: "
            },
            {
              "kind": "Content",
              "text": "{\n    min?: number;\n    max?: number;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "limits",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "clamp"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!clamp:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clamp(limits: "
            },
            {
              "kind": "Content",
              "text": "{\n    min?: number;\n    max?: number;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: number) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "limits",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "clamp"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!clone:function(1)",
          "docComment": "/**\n * Creates a deep copy of the value. Supported types: `Array`, `Object`, `Number`, `String`, `Boolean`, `Date`, `RegExp`. Functions are assigned by reference rather than copied.\n *\n * @param value - the object to clone  @signature P.clone(value)\n *\n * @example\n *\n * P.clone({foo: 'bar'}) // {foo: 'bar'}  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clone<T extends "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">(value: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "clone"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!compact:function(1)",
          "docComment": "/**\n * Removes all undefined and null values from object rreecursively\n *\n * @param data - the object to compact  @signature P.compact(value)\n *\n * @example\n *\n * P.compact({foo: undefined}) // {}  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compact<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "compact"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!compact:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compact<T>(): "
            },
            {
              "kind": "Content",
              "text": "(data: T) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "compact"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!ComplexSort:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComplexSort = "
            },
            {
              "kind": "Content",
              "text": "{\n    order?: 'asc' | 'desc';\n    value: "
            },
            {
              "kind": "Reference",
              "text": "SortValue",
              "canonicalReference": "ts-prime!SortValue:type"
            },
            {
              "kind": "Content",
              "text": ";\n    compare?: (a: "
            },
            {
              "kind": "Reference",
              "text": "SortValue",
              "canonicalReference": "ts-prime!SortValue:type"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Reference",
              "text": "SortValue",
              "canonicalReference": "ts-prime!SortValue:type"
            },
            {
              "kind": "Content",
              "text": ") => number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ComplexSort",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!convertStringToNameCase:function(1)",
          "docComment": "/**\n * Convert any string to nameCased variant\n *\n * @param str - the string\n *\n * @param to - convert string to 'PascalCase' | 'camelCase' | 'snake_case' | 'kebab-case' | 'Train-Case'  @signature P.convertStringToNameCase(str, to);\n *\n * @example\n *\n * P.convertStringToNameCase(\"Super#@! ===-0- ball %%% cup\", 'PascalCase') // -> Super0BallCup P.convertStringToNameCase(\"Super#@! ===-0- ball %%% cup\", 'camelCase') // -> super0BallCup P.convertStringToNameCase(\"Super#@! ===-0- ball %%% cup\", 'snake_case') // -> super_0_ball_cup P.convertStringToNameCase(\"Super#@! ===-0- ball %%% cup\", 'kebab-case') // -> super-0-ball-cup P.convertStringToNameCase(\"Super#@! ===-0- ball %%% cup\", 'Train-Case') // -> Super-0-Ball-Cup  @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function convertStringToNameCase(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", to: "
            },
            {
              "kind": "Content",
              "text": "'PascalCase' | 'camelCase' | 'snake_case' | 'kebab-case' | 'Train-Case'"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "to",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "convertStringToNameCase"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(1)",
          "docComment": "/**\n * Creates a data-last pipe function. First function must be always annotated. Other functions are automatically inferred.  @signature P.createPipe(op1, op2, op3)(data);\n *\n * @example\n *\n * P.createPipe( (x: number) => x * 2, x => x * 3 )(1) // => 6  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => C"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C, D>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => D"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C, D, E>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(5)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C, D, E, F>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => F"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 5,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(6)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C, D, E, F, G>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": ", op6: "
            },
            {
              "kind": "Content",
              "text": "(input: F) => G"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => G"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 6,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "op6",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!createPipe:function(7)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createPipe<A, B, C, D, E, F, G, H>(op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": ", op6: "
            },
            {
              "kind": "Content",
              "text": "(input: F) => G"
            },
            {
              "kind": "Content",
              "text": ", op7: "
            },
            {
              "kind": "Content",
              "text": "(input: G) => H"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: A) => H"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 7,
          "parameters": [
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "op6",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "parameterName": "op7",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "H",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createPipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!debounce:function(1)",
          "docComment": "/**\n * The Debounce technique allow us to “group” multiple sequential calls in a single one.  @description https://css-tricks.com/debouncing-throttling-explained-examples/\n *\n * @param func - Any provided function\n *\n * @param debounceTimeMs - duration in milliseconds\n *\n * @example\n *\n * const debouncedLog = P.debounce(console.log, 500) debouncedLog(\"I will be printed only if 500ms ago this function was not called\")  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function debounce<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(debounceTimeMs: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(func: E) => E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "debounceTimeMs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "debounce"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!debounce:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function debounce<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(func: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", debounceTimeMs: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "debounceTimeMs",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "debounce"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!decodeUTF8:function(1)",
          "docComment": "/**\n * Decode UTF8 encoded characters  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeUTF8(utftext: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "utftext",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "decodeUTF8"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!deepEqual:function(1)",
          "docComment": "/**\n * Compares two values recursively.  @warning Soft mode is relative expensive operation.  @description The function has two modes `soft` and `hard` soft mode ignores array order hard mode preserves array order - `Soft mode` ignore array order.\n *\n * @param valueA - anything\n *\n * @param valueB - anything\n *\n * @param mode - array comparison mode  @category Utility\n *\n * @example\n *\n * P.deepEquals({ data: 1, super: [{ id: 1, name: \"Tom\" }, { id: 2, name: \"Martin\" }] }, { data: 1, super: [{ id: 2, name: \"Martin\" }, { id: 1, name: \"Tom\" }] }) // false super property is not equal\n *\n * P.deepEquals({ data: 1, super: [{ id: 1, name: \"Tom\" }, { id: 2, name: \"Martin\" }] }, { data: 1, super: [{ id: 2, name: \"Martin\" }, { id: 1, name: \"Tom\" }] }, 'soft') // true Ignores array order\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepEqual(valueA: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", valueB: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", mode?: "
            },
            {
              "kind": "Content",
              "text": "'soft' | 'hard'"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "valueA",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "valueB",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "mode",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "deepEqual"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!deepMergeLeft:function(1)",
          "docComment": "/**\n * Merging object from left to right\n *\n * @param target - value be preserved if possible.\n *\n * @param sources - value be preserved if possible.  @description Consider following\n *\n * - `array + obj = array` - `obj + array = obj` - `obj + obj = obj` (recursively merged) - `array + array = array` (removes duplicates using Set) - `(truthy plain value) + ob = (truthy plain value)` - `(truthy plain value) + undefined = (truthy plain value)` - `A(truthy plain value) + B(truthy plain value) = A(truthy plain value)` - `undefined + B(truthy plain value) = B(truthy plain value)` - `null + B(truthy plain value) = B(truthy plain value)`\n *\n * Handles circular references  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepMergeLeft<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", X extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-prime!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", ...source: "
            },
            {
              "kind": "Content",
              "text": "X[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "X",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepMergeLeft"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!deepMergeLeft:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepMergeLeft<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(...sources: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "sources",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepMergeLeft"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!deepMergeRight:function(1)",
          "docComment": "/**\n * Merging object from right to left\n *\n * @param target - value will be replaced if possible.  @description Consider following - `array + obj = obj` - `obj + array = array` - `obj + obj = obj` (recursively merged) - `array + array = array` (removes duplicates using Set) - `(truthy plain value) + undefined = (truthy plain value)` - `A(truthy plain value) + B(truthy plain value) = B(truthy plain value)` Handles circular references  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepMergeRight<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", X extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-prime!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", ...source: "
            },
            {
              "kind": "Content",
              "text": "X[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "X",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepMergeRight"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!deepMergeRight:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepMergeRight<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(...sources: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "sources",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepMergeRight"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepNonNullable:type",
          "docComment": "/**\n * NonNullable that works for deeply nested structure\n *\n * @example\n *\n * // Expect: { // first: { // second: { // name: string; // }; // }; // } type NestedProps = { first?: null | { second?: null | { name?: string | null | undefined; }; }; }; type RequiredNestedProps = DeepNonNullable<NestedProps>;  @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepNonNullable<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: any[]) => any ? T : T extends any[] ? "
            },
            {
              "kind": "Reference",
              "text": "DeepNonNullableArray",
              "canonicalReference": "ts-prime!DeepNonNullableArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[number]> : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "DeepNonNullableObject",
              "canonicalReference": "ts-prime!DeepNonNullableObject:type"
            },
            {
              "kind": "Content",
              "text": "<T> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepNonNullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!DeepNonNullableArray:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeepNonNullableArray<T> extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepNonNullable",
              "canonicalReference": "ts-prime!DeepNonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "DeepNonNullableArray",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepNonNullableObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepNonNullableObject<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]-?: "
            },
            {
              "kind": "Reference",
              "text": "DeepNonNullable",
              "canonicalReference": "ts-prime!DeepNonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepNonNullableObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepPartial:type",
          "docComment": "/**\n * Partial that works for deeply nested structure\n *\n * @example\n *\n * // Expect: { // first?: { // second?: { // name?: string; // }; // }; // } type NestedProps = { first: { second: { name: string; }; }; }; type PartialNestedProps = DeepPartial<NestedProps>;  @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepPartial<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " ? T : T extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<infer U> ? "
            },
            {
              "kind": "Reference",
              "text": "DeepPartialArray",
              "canonicalReference": "ts-prime!DeepPartialArray:interface"
            },
            {
              "kind": "Content",
              "text": "<U> : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "DeepPartialObject",
              "canonicalReference": "ts-prime!DeepPartialObject:type"
            },
            {
              "kind": "Content",
              "text": "<T> : T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepPartial",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!DeepPartialArray:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeepPartialArray<T> extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-prime!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "DeepPartialArray",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepPartialObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepPartialObject<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-prime!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepPartialObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepReadonly:type",
          "docComment": "/**\n * Readonly that works for deeply nested structure\n *\n * @example\n *\n * // Expect: { // readonly first: { // readonly second: { // readonly name: string; // }; // }; // } type NestedProps = { first: { second: { name: string; }; }; }; type ReadonlyNestedProps = DeepReadonly<NestedProps>;  @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonly<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: any[]) => any ? T : T extends any[] ? "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonlyArray",
              "canonicalReference": "ts-prime!DeepReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[number]> : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonlyObject",
              "canonicalReference": "ts-prime!DeepReadonlyObject:type"
            },
            {
              "kind": "Content",
              "text": "<T> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepReadonly",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!DeepReadonlyArray:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeepReadonlyArray<T> extends "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "ts-prime!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "DeepReadonlyArray",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepReadonlyObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepReadonlyObject<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly [P in keyof T]: "
            },
            {
              "kind": "Reference",
              "text": "DeepReadonly",
              "canonicalReference": "ts-prime!DeepReadonly:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepReadonlyObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepRequired:type",
          "docComment": "/**\n * Required that works for deeply nested structure\n *\n * @example\n *\n * // Expect: { // first: { // second: { // name: string; // }; // }; // } type NestedProps = { first?: { second?: { name?: string; }; }; }; type RequiredNestedProps = DeepRequired<NestedProps>;  @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepRequired<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: any[]) => any ? T : T extends any[] ? "
            },
            {
              "kind": "Reference",
              "text": "DeepRequiredArray",
              "canonicalReference": "ts-prime!DeepRequiredArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[number]> : T extends object ? "
            },
            {
              "kind": "Reference",
              "text": "DeepRequiredObject",
              "canonicalReference": "ts-prime!DeepRequiredObject:type"
            },
            {
              "kind": "Content",
              "text": "<T> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepRequired",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!DeepRequiredArray:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeepRequiredArray<T> extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeepRequired",
              "canonicalReference": "ts-prime!DeepRequired:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "DeepRequiredArray",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!DeepRequiredObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepRequiredObject<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]-?: "
            },
            {
              "kind": "Reference",
              "text": "DeepRequired",
              "canonicalReference": "ts-prime!DeepRequired:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepRequiredObject",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!delay:function(1)",
          "docComment": "/**\n * Creates delay\n *\n * @param ms - Time in milliseconds  @signature P.delay(ms)\n *\n * @example\n *\n * await P.delay(1000)  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function delay(ms: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "delay"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!difference:function(1)",
          "docComment": "/**\n * Excludes the values from `other` array.\n *\n * @param array - the source array\n *\n * @param other - the values to exclude  @signature P.difference(array, other)\n *\n * @example\n *\n * P.difference([1, 2, 3, 4], [2, 5, 3]) // => [1, 4] @data_first  @category Array  @pipeable\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function difference<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "difference"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!difference:function(2)",
          "docComment": "/**\n * Excludes the values from `other` array.\n *\n * @param other - the values to exclude  @signature P.difference(other)(array)\n *\n * @example\n *\n * P.difference([2, 5, 3])([1, 2, 3, 4]) // => [1, 4] P.pipe( [1, 2, 3, 4, 5, 6], // only 4 iterations P.difference([2, 3]), P.take(2) ) // => [1, 4] @data_last  @category Array  @pipeable\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function difference<T, K>(other: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly K[]) => readonly T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "difference"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!difference:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace difference "
            }
          ],
          "releaseTag": "Public",
          "name": "difference",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!difference.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(other: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!drop:function(1)",
          "docComment": "/**\n * Removes first `n` elements from the `array`.\n *\n * @param array - the target array\n *\n * @param n - the number of elements to skip  @signature P.drop(array, n)\n *\n * @example\n *\n * P.drop([1, 2, 3, 4, 5], 2) // => [1, 2, 3] @data_first  @pipeable  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function drop<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "drop"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!drop:function(2)",
          "docComment": "/**\n * Removes first `n` elements from the `array`.\n *\n * @param array - the target array\n *\n * @param n - the number of elements to skip  @signature P.drop(n)(array)\n *\n * @example\n *\n * P.drop(2)([1, 2, 3, 4, 5]) // => [1, 2, 3] @data_last  @pipeable  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function drop<T>(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "drop"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!drop:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace drop "
            }
          ],
          "releaseTag": "Public",
          "name": "drop",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!drop.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!dropLast:function(1)",
          "docComment": "/**\n * Removes last `n` elements from the `array`.\n *\n * @param array - the target array\n *\n * @param n - the number of elements to skip  @signature P.dropLast(array, n)\n *\n * @example\n *\n * P.dropLast([1, 2, 3, 4, 5], 2) // => [1, 2, 3] @data_first  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dropLast<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "dropLast"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!dropLast:function(2)",
          "docComment": "/**\n * Removes last `n` elements from the `array`.\n *\n * @param array - the target array\n *\n * @param n - the number of elements to skip  @signature P.dropLast(n)(array)\n *\n * @example\n *\n * P.dropLast(2)([1, 2, 3, 4, 5]) // => [1, 2, 3] @data_last  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dropLast<T>(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "dropLast"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!encodeUTF8:function(1)",
          "docComment": "/**\n * Encode UTF8 characters  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeUTF8(input: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "encodeUTF8"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!ensureArray:function(1)",
          "docComment": "/**\n * Ensures array data type\n *\n * @param data - Item or array  @signature P.ensureArray(data)\n *\n * @example\n *\n * ensureArray(1) // => [1] ensureArray([1]) // => [1]  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ensureArray<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ensureArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!ensureError:function(1)",
          "docComment": "/**\n * Ensures that err is Error instance  @signature P.ensureError(any)\n *\n * @example\n *\n * const request = doRequest().catch(P.ensureError) if (P.isError(request)) return  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ensureError(err: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "err",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "ensureError"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!ensureType:function(1)",
          "docComment": "/**\n * Ensures typescript type\n *\n * @param data - data object\n *\n * @example\n *\n * const data = myFunction() P.ensureType<number>(data) // If data is not number typescript compiler will complain  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ensureType<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ensureType"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!entries:function(1)",
          "docComment": "/**\n * Returns an array of key/values of the enumerable properties of an object.\n *\n * @param object - Any object  @signature P.entries(object)\n *\n * @example\n *\n * P.entries({ a: 1, b: 2, c: 3 }) // => [['a', 1], ['b', 2], ['c', 3]]  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function entries<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "(obj: T) => "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<[keyof T, T[keyof T]]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "entries"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!entries:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function entries<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(obj: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<[keyof T, T[keyof T]]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "entries"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!equals:function(1)",
          "docComment": "/**\n * Returns true if its arguments are equivalent, false otherwise.  @warning Doesn't handle cyclical data structures.\n *\n * @param a - the first object to compare\n *\n * @param b - the second object to compare  @signature P.equals(a, b)\n *\n * @example\n *\n * P.equals(1, 1) //=> true P.equals(1, '1') //=> false P.equals([1, 2, 3], [1, 2, 3]) //=> true @data_first  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function equals(a: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "equals"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!equals:function(2)",
          "docComment": "/**\n * Returns true if its arguments are equivalent, false otherwise.  @warning Doesn't handle cyclical data structures.\n *\n * @param a - the first object to compare\n *\n * @param b - the second object to compare  @signature P.equals(b)(a)\n *\n * @example\n *\n * P.equals(1)(1) //=> true P.equals('1')(1) //=> false P.equals([1, 2, 3])([1, 2, 3]) //=> true @data_last  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function equals(a: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(b: any) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "equals"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filter:function(1)",
          "docComment": "/**\n * Filter the elements of an array that meet the condition specified in a callback function.\n *\n * @param array - The array to filter.\n *\n * @param fn - the callback function.  @signature P.filter(array, fn)  @signature P.filter(fn)(array)\n *\n * @example\n *\n * P.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]\n *\n * P.pipe([1, 2, 3], P.filter(x => x % 2 === 1)) // => [1, 3]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filter<T, S extends "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(value: T) => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "ts-prime!~value"
            },
            {
              "kind": "Content",
              "text": " is S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "S[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filter"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filter:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filter<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filter"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filter:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filter<T, S extends "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(input: T) => "
            },
            {
              "kind": "Reference",
              "text": "input",
              "canonicalReference": "ts-prime!~input"
            },
            {
              "kind": "Content",
              "text": " is S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => S[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filter"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filter:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filter<T>(fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filter"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!filter:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace filter "
            }
          ],
          "releaseTag": "Public",
          "name": "filter",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!filter.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, S extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Content",
                  "text": "(input: T, index: number, array: readonly T[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "input",
                  "canonicalReference": "ts-prime!~input"
                },
                {
                  "kind": "Content",
                  "text": " is S"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "S[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "S",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!filter.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!filter.indexed:function(3)",
              "docComment": "/**\n * @data_last\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, S extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(input: T, index: number, array: readonly T[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "input",
                  "canonicalReference": "ts-prime!~input"
                },
                {
                  "kind": "Content",
                  "text": " is S"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => S[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "S",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!filter.indexed:function(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!filter.lazy:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazy: "
                },
                {
                  "kind": "Content",
                  "text": "<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: readonly T[] | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                }
              ],
              "releaseTag": "Public",
              "name": "lazy",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!filter.lazyIndexed:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazyIndexed: "
                },
                {
                  "kind": "Content",
                  "text": "(<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: readonly T[] | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>) & {\n        indexed: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazyIndexed",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filterRecord:function(1)",
          "docComment": "/**\n * Loops each record element and match against provided predicate.\n *\n * @param record - The object to filter.\n *\n * @param fn - Predicate function.\n *\n * @returns The new filtered record.  @signature P.filterRecord(record, fn)  @signature P.pipe({ a: 1, b: 2, c: 3 }, P.filterRecord(fn))\n *\n * @example\n *\n * P.filterRecord({ a: 1, b: 2, c: 3 }, ([k,v]) => [k, v * 2]) // => { a: 2, b: 4, c: 6 } P.pipe({ a: 1, b: 2, c: 3 }, P.filterRecord(([k,v]) => [k, v * 2]))) // => { a: 2, b: 4, c: 6 }  @category Object, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filterRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<[keyof T, T[keyof T]], any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof T, T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filterRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!filterRecord:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filterRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(v: [keyof T, T[keyof T]]) => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(record: T) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof T, T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "filterRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!find:function(1)",
          "docComment": "/**\n * Returns the value of the first element in the array where predicate is true, and undefined otherwise.\n *\n * @param items - the array\n *\n * @param fn - the predicate  @signature P.find(items, fn)  @signature P.find(fn)(items)\n *\n * @example\n *\n * P.find([1, 3, 4, 6], n => n % 2 === 0) // => 4 P.pipe( [1, 3, 4, 6], P.find(n => n % 2 === 0) ) // => 4 P.pipe( [1, 3, 4, 6], P.find.indexed((n, i) => n % 2 === 0) ) // => 4  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function find<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "find"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!find:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function find<T = "
            },
            {
              "kind": "Content",
              "text": "never"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "find"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!find:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace find "
            }
          ],
          "releaseTag": "Public",
          "name": "find",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!find.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!find.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!find.lazy:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazy: "
                },
                {
                  "kind": "Content",
                  "text": "(<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {\n        done: boolean;\n        hasNext: boolean;\n        next: T;\n    }) & {\n        single: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazy",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!find.lazyIndexed:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazyIndexed: "
                },
                {
                  "kind": "Content",
                  "text": "(<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {\n        done: boolean;\n        hasNext: boolean;\n        next: T;\n    }) & {\n        indexed: true;\n    } & {\n        single: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazyIndexed",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!findIndex:function(1)",
          "docComment": "/**\n * Returns the index of the first element in the array where predicate is true, and -1 otherwise.\n *\n * @param items - the array\n *\n * @param fn - the predicate  @signature P.findIndex(items, fn)  @signature P.findIndex(fn)(items)\n *\n * @example\n *\n * P.findIndex([1, 3, 4, 6], n => n % 2 === 0) // => 2 P.pipe( [1, 3, 4, 6], P.findIndex(n => n % 2 === 0) ) // => 4  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findIndex<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!findIndex:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findIndex<T>(fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findIndex"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!findIndex:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace findIndex "
            }
          ],
          "releaseTag": "Public",
          "name": "findIndex",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!findIndex.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!findIndex.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!findIndex.lazy:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazy: "
                },
                {
                  "kind": "Content",
                  "text": "(<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {\n        done: boolean;\n        hasNext: boolean;\n        next: number;\n    } | {\n        done: boolean;\n        hasNext: boolean;\n        next?: undefined;\n    }) & {\n        single: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazy",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!findIndex.lazyIndexed:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazyIndexed: "
                },
                {
                  "kind": "Content",
                  "text": "(<T>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {\n        done: boolean;\n        hasNext: boolean;\n        next: number;\n    } | {\n        done: boolean;\n        hasNext: boolean;\n        next?: undefined;\n    }) & {\n        indexed: true;\n    } & {\n        single: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazyIndexed",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!first:function(1)",
          "docComment": "/**\n * Gets the first element of `array`. Note: In `pipe`, use `first()` form instead of `first`. Otherwise, the inferred type is lost.\n *\n * @param array - the array  @signature P.first(array)\n *\n * @example\n *\n * P.first([1, 2, 3]) // => 1 P.first([]) // => undefined P.pipe( [1, 2, 4, 8, 16], P.filter(x => x > 3), P.first(), x => x + 1 ); // => 5\n *\n * @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function first<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "first"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!first:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function first<T>(): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "first"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!first:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function first<T>(defaultValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "first"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!first:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace first "
            }
          ],
          "releaseTag": "Public",
          "name": "first",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!first.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(): "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => {\n        done: boolean;\n        hasNext: boolean;\n        next: T;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            },
            {
              "kind": "Namespace",
              "canonicalReference": "ts-prime!first.lazy:namespace",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace lazy "
                }
              ],
              "releaseTag": "Public",
              "name": "lazy",
              "members": [
                {
                  "kind": "Variable",
                  "canonicalReference": "ts-prime!first.lazy.single:var",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "single = true"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "single",
                  "variableTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMap:function(1)",
          "docComment": "/**\n * Map each element of an array using a defined callback function and flatten the mapped result.\n *\n * @param array - The array to map.\n *\n * @param fn - The function mapper.  @signature P.flatMap(array, fn)\n *\n * @example\n *\n * P.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30] @data_first  @pipeable  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMap<T, K>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(input: T) => K | readonly K[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "K[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMap:function(2)",
          "docComment": "/**\n * Map each element of an array using a defined callback function and flatten the mapped result.\n *\n * @param array - The array to map.\n *\n * @param fn - The function mapper.  @signature P.flatMap(fn)(array)\n *\n * @example\n *\n * P.pipe([1, 2, 3], P.flatMap(x => [x, x * 10])) // => [1, 10, 2, 20, 3, 30] @data_last  @pipeable  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMap<T, K>(fn: "
            },
            {
              "kind": "Content",
              "text": "(input: T) => K | K[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => readonly K[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMapRecord:function(1)",
          "docComment": "/**\n * Loops each record element and flatMaps against provided function.\n *\n * @param record - The target object.\n *\n * @param fn - Mapping function.\n *\n * @returns The new record.  @signature P.flatMapRecord(record, fn)\n *\n * @example\n *\n * P.flatMapRecord({ a: 1, b: 2, c: 3 }, ([k,v]) => [[k, v * 2], [k + \"_abc\", v * 2]]) // => { a: 2, a_abc: 2, b: 4, b_abc: 4, c: 6, c_abc: 6 } @data_first  @pipeable  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMapRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", V>(record: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<[keyof T, T[keyof T]], "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<[K, V]>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMapRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMapRecord:function(2)",
          "docComment": "/**\n * Loops each record element and flatMaps against provided function.\n *\n * @param record - The target object.\n *\n * @param fn - Mapping function.\n *\n * @returns The new record.  @signature P.pipe(record, P.flatMapRecord(fn))\n *\n * @example\n *\n * P.pipe(({ a: 1, b: 2, c: 3 }, P.flatMapRecord(([k,v]) => [[k, v * 2], [k + \"_abc\", v * 2]])) // => { a: 2, a_abc: 2, b: 4, b_abc: 4, c: 6, c_abc: 6 } @data_last  @pipeable  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMapRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", V extends "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(v: [keyof T, T[keyof T]]) => "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<[K, V]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(record: T) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 11
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMapRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMapToObj:function(1)",
          "docComment": "/**\n * Map each element of an array into an object using a defined callback function and flatten the result.\n *\n * @param array - The array to map.\n *\n * @param fn - The mapping function, which should return an Array of key-value pairs, similar to Object.fromEntries\n *\n * @returns The new mapped object.  @signature P.flatMapToObj(array, fn) P.flatMapToObj.indexed(array, fn)\n *\n * @example\n *\n * P.flatMapToObj([1, 2, 3], (x) => x % 2 === 1 ? [[String(x), x]] : [] ) // => {1: 1, 3: 3} P.flatMapToObj.indexed(['a', 'b'], (x, i) => [ [x, i], [x + x, i + i], ]) // => {a: 0, aa: 0, b: 1, bb: 2} @data_first  @indexed  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMapToObj<T, K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ", V>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(element: T, index: number, array: readonly T[]) => [K, V][]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMapToObj"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatMapToObj:function(2)",
          "docComment": "/**\n * Map each element of an array into an object using a defined callback function and flatten the result.\n *\n * @param fn - The mapping function, which should return an Array of key-value pairs, similar to Object.fromEntries\n *\n * @returns The new mapped object.  @signature P.flatMapToObj(fn)(array) P.flatMapToObj(fn)(array)\n *\n * @example\n *\n * P.pipe( [1, 2, 3], P.flatMapToObj(x => (x % 2 === 1 ? [[String(x), x]] : [])) ) // => {1: 1, 3: 3} P.pipe( ['a', 'b'], P.flatMapToObj.indexed((x, i) => [ [x, i], [x + x, i + i], ]) ) // => {a: 0, aa: 0, b: 1, bb: 2} @data_last  @indexed  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatMapToObj<T, K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ", V>(fn: "
            },
            {
              "kind": "Content",
              "text": "(element: T, index: number, array: readonly T[]) => [K, V][]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatMapToObj"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatten:function(1)",
          "docComment": "/**\n * Flattens `array` a single level deep. Note: In `pipe`, use `flatten()` form instead of `flatten`. Otherwise, the inferred type is lost.\n *\n * @param items - the target array  @signature P.flatten(array)\n *\n * @example\n *\n * P.flatten([[1, 2], [3], [4, 5]]) // => [1, 2, 3, 4, 5] P.pipe( [[1, 2], [3], [4, 5]], P.flatten(), ); // => [1, 2, 3, 4, 5]  @category Array  @pipeable\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatten<T>(items: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Flatten",
              "canonicalReference": "ts-prime!~Flatten:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatten"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flatten:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flatten<T>(): "
            },
            {
              "kind": "Content",
              "text": "(items: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Flatten",
              "canonicalReference": "ts-prime!~Flatten:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flatten"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!flatten:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace flatten "
            }
          ],
          "releaseTag": "Public",
          "name": "flatten",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!flatten.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(): "
                },
                {
                  "kind": "Content",
                  "text": "(next: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flattenDeep:function(1)",
          "docComment": "/**\n * Recursively flattens `array`. Note: In `pipe`, use `flattenDeep()` form instead of `flattenDeep`. Otherwise, the inferred type is lost.\n *\n * @param items - the target array  @signature P.flattenDeep(array)\n *\n * @example\n *\n * P.flattenDeep([[1, 2], [[3], [4, 5]]]) // => [1, 2, 3, 4, 5] P.pipe( [[1, 2], [[3], [4, 5]]], P.flattenDeep(), ); // => [1, 2, 3, 4, 5]  @category Array  @pipeable\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flattenDeep<T>(items: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FlattenDeep",
              "canonicalReference": "ts-prime!~FlattenDeep:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flattenDeep"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!flattenDeep:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function flattenDeep<T>(): "
            },
            {
              "kind": "Content",
              "text": "(items: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FlattenDeep",
              "canonicalReference": "ts-prime!~FlattenDeep:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "flattenDeep"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!flattenDeep:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace flattenDeep "
            }
          ],
          "releaseTag": "Public",
          "name": "flattenDeep",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!flattenDeep.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy(): "
                },
                {
                  "kind": "Content",
                  "text": "(value: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!formatBytes:function(1)",
          "docComment": "/**\n * Format bytes to human readable format\n *\n * @param fn - target function  @signature P.formatBytes(bytes)\n *\n * @example\n *\n * P.formatBytes(12457150) // => 11.88MB  @category Utility, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatBytes(bytes: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", decimals?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bytes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "decimals",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "formatBytes"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!fromEntries:function(1)",
          "docComment": "/**\n * Construct object from tuple array\n *\n * @param data - List of tuples  @signature P.fromEntries(tuples)\n *\n * @example\n *\n * P.fromEntries([[\"a\", 5], [\"b\", 4]]) // => { a: 5, b: 4 }  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromEntries<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyArray",
              "canonicalReference": "ts-prime!AnyArray:type"
            },
            {
              "kind": "Content",
              "text": "<[string, any] | readonly [string, any]>"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "(entries: T) => {\n    [k in T[number][0]]: T[number][1];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "fromEntries"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!fromEntries:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromEntries<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyArray",
              "canonicalReference": "ts-prime!AnyArray:type"
            },
            {
              "kind": "Content",
              "text": "<[string, any] | readonly [string, any]>"
            },
            {
              "kind": "Content",
              "text": ">(entries: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    [k in T[number][0]]: T[number][1];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "entries",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "fromEntries"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!groupBy:function(1)",
          "docComment": "/**\n * Splits a collection into sets, grouped by the result of running each value through `fn`.\n *\n * @param items - the items to group\n *\n * @param fn - the grouping function  @signature P.groupBy(array, fn)  @signature P.groupBy(fn)(array)\n *\n * @example\n *\n * P.groupBy(['one', 'two', 'three'], x => x.length) // => {3: ['one', 'two'], 5: ['three']} P.pipe(['one', 'two', 'three'], P.groupBy(x => x.length)) // => {3: ['one', 'two'], 5: ['three']}  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function groupBy<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof any"
            },
            {
              "kind": "Content",
              "text": ">(items: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => K | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "groupBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!groupBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function groupBy<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof any"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => K | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "groupBy"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!groupBy:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace groupBy "
            }
          ],
          "releaseTag": "Public",
          "name": "groupBy",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!groupBy.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof any"
                },
                {
                  "kind": "Content",
                  "text": ">(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K | "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!groupBy.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof any"
                },
                {
                  "kind": "Content",
                  "text": ">(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K | "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!hash:function(1)",
          "docComment": "/**\n * Non cryptographic quality hashing function\n *\n * @param data - Hash content\n *\n * @example\n *\n * P.hash(\"THIS IS AWESOME\") //=> LTU1MjU4ODc4NQ  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hash(data: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "hash"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!haveKeys:function(1)",
          "docComment": "/**\n * Checks if object contains defined\n *\n * @param predicate - predicate function\n *\n * @example\n *\n * const data = [new Error('sample'), 1, 2].filter(P.isNot(P.isError)) // [1,2]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function haveKeys<K extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(keys: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "<T extends {\n    [k: string]: unknown;\n}>(data: T) => "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is T & {\n    [k in K]: "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T[k]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "haveKeys"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!identity:function(1)",
          "docComment": "/**\n * Return same value  @description Function that returns provided value  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function identity<T>(value: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "identity"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!includesAny:function(1)",
          "docComment": "/**\n * Checks if\n *\n * @param data - contains any element of\n *\n * @param includes - and returns boolean\n *\n * @param data - Value to check\n *\n * @param includes - Provided list  @signature P.includesAny(sourceList, includeList)  @signature P.includesAny(includeList)(sourceList)\n *\n * @example\n *\n * P.includesAny(['apple','microsoft','tesla','samsung'],['apple', 'xiomi']) //=> true; Source list contains \"apple\" P.includesAny(['apple', 'microsoft'])(['samsung', 'tesla']) //=> false // Source list does not include any of options  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function includesAny<T>(data: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", includes: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "includes",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "includesAny"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!includesAny:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function includesAny<T>(includes: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "includes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "includesAny"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!includesEvery:function(1)",
          "docComment": "/**\n * Checks if\n *\n * @param data - contains every element of\n *\n * @param includes - and returns boolean\n *\n * @param data - Value to check\n *\n * @param includes - Provided list  @signature P.includesEvery(sourceList, includeList)  @signature P.includesEvery(includeList)(sourceList)\n *\n * @example\n *\n * P.includesEvery(['apple','microsoft','tesla','samsung'],['apple', 'microsoft']) //=> true; Source list contains \"apple\" and 'microsoft' P.includesEvery(['apple', 'microsoft'])(['samsung', 'tesla', 'apple']) //=> false // Source list does not include every of options  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function includesEvery<T>(data: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", includes: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "includes",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "includesEvery"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!includesEvery:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function includesEvery<T>(includes: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "includes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "includesEvery"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!indexBy:function(1)",
          "docComment": "/**\n * Converts a list of objects into an object indexing the objects by the given key.\n *\n * @param array - the array\n *\n * @param fn - the indexing function  @signature P.indexBy(array, fn) P.indexBy(fn)(array)\n *\n * @example\n *\n * P.indexBy(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'} P.pipe( ['one', 'two', 'three'], P.indexBy(x => x.length) ) // => {3: 'two', 5: 'three'}  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function indexBy<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "indexBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!indexBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function indexBy<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => string | number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "indexBy"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!indexBy:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace indexBy "
            }
          ],
          "releaseTag": "Public",
          "name": "indexBy",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!indexBy.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!indexBy.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!intersection:function(1)",
          "docComment": "/**\n * Returns a list of elements that exist in both array.\n *\n * @param array - the source array\n *\n * @param other - the second array  @signature P.intersection(array, other)  @signature P.intersection(other)(array)\n *\n * @example\n *\n * P.intersection([1, 2, 3], [2, 3, 5]) // => [2, 3] P.intersection([2, 3, 5])([1, 2, 3]) // => [2, 3]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function intersection<T>(source: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "intersection"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!intersection:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function intersection<T, K>(other: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(source: readonly K[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "intersection"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!intersection:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace intersection "
            }
          ],
          "releaseTag": "Public",
          "name": "intersection",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!intersection.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(other: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isArray:function(1)",
          "docComment": "/**\n * Checks if `data` is `array`.\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | string[] if (P.isArray(item)) { console.log(item.map((q)=> q.match(/.../))) }\n *\n * const items = [{ data: 1 },[],\"1\",4,P.clamp].filter(P.isArray) //=> [\"1\"]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArray<T extends "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyArray",
              "canonicalReference": "ts-prime!~DefinitelyArray:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isBoolean:function(1)",
          "docComment": "/**\n * Checks if `data` is boolean\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = false as { data: number } | undefined | boolean if (P.isBoolean(item)) { console.log(item.data) }  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBoolean<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyBoolean",
              "canonicalReference": "ts-prime!~DefinitelyBoolean:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isDefined:function(1)",
          "docComment": "/**\n * Checks if `data` is defined\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | undefined if (P.isDefined(item)) { console.log(item.data) }  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDefined<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isDefined"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isError:function(1)",
          "docComment": "/**\n * Checks if `data` is instance of Error class\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = new Error('Error') as unknown if (P.isError(item)) { // This is definitely an error and Typescript resolves it console.log(item.message) }\n *\n * const items = [1,2,3,4,new Error('Error')].filter(P.isError) //=> [new Error('Error')]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isError<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyError",
              "canonicalReference": "ts-prime!~DefinitelyError:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isError"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isFunction:function(1)",
          "docComment": "/**\n * Checks if `data` is `function`\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = P.clamp as unknown if (P.isNil(item)) { // Item is definitely function console.log('Nice function', item.name) }\n *\n * const items = [1,2,3,4,P.clamp].filter(P.isFunction) //=> [P.clamp]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFunction<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyFunction",
              "canonicalReference": "ts-prime!~DefinitelyFunction:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isNil:function(1)",
          "docComment": "/**\n * Checks if `data` is `null` or `undefined`. Executes basic `data == null` evaluation\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = undefined as unknown if (P.isNil(item)) { // Item is definitely null | undefined console.log('Do something') }\n *\n * const items = [1,2,3,4,undefined].filter(P.isNil) //=> [undefined]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNil<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<T, null | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isNil"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isNot:function(1)",
          "docComment": "/**\n * Inverse predicate\n *\n * @param predicate - predicate function\n *\n * @example\n *\n * const data = [new Error('sample'), 1, 2].filter(P.isNot(P.isError)) // [1,2]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNot<T, S>(predicate: "
            },
            {
              "kind": "Content",
              "text": "(data: T) => "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: T) => "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, S>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "predicate",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isNot"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isNot:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNot<T>(predicate: "
            },
            {
              "kind": "Content",
              "text": "(data: T) => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(data: T) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "predicate",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isNot"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isNumber:function(1)",
          "docComment": "/**\n * Checks if `data` is `Number`\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | number if (P.isNumber(item)) { console.log(\"My phone number is\", item) }  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNumber<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyNumber",
              "canonicalReference": "ts-prime!~DefinitelyNumber:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isObject:function(1)",
          "docComment": "/**\n * Checks if `data` is `object`.  @warning This function does not treat `Array` as `object`\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | string[] if (P.isObject(item)) { console.log(item.data) }\n *\n * const items = [{ data: 1 },[],1,4,P.clamp].filter(P.isObject) //=> [{ data: 1 }]  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isObject<T extends "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyObject",
              "canonicalReference": "ts-prime!~DefinitelyObject:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isOneOf:function(1)",
          "docComment": "/**\n * Checks if value is one of provided list\n *\n * @param value - Value to check\n *\n * @param array - Provided list  @signature P.isOneOf(value, list)  @signature P.isOneOf(list)(value)\n *\n * @example\n *\n * P.isOneOf('apple',['apple', 'microsoft']) //=> true P.isOneOf(['apple', 'microsoft'])('apple') //=> true  @category Guard, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isOneOf<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean"
            },
            {
              "kind": "Content",
              "text": ">(value: "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean | undefined"
            },
            {
              "kind": "Content",
              "text": ", array: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "ts-prime!~value"
            },
            {
              "kind": "Content",
              "text": " is T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isOneOf"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isOneOf:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isOneOf<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean"
            },
            {
              "kind": "Content",
              "text": ">(array: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | number | boolean | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "ts-prime!~value"
            },
            {
              "kind": "Content",
              "text": " is T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isOneOf"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isPromise:function(1)",
          "docComment": "/**\n * Checks if `data` is `Promise`.\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | Promise<string[]> if (P.isPromise(item)) { const result = await item console.log(Promise resolved,result.map((q)=> q.match(/.../))) } // Item is not promise  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPromise<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyPromise",
              "canonicalReference": "ts-prime!~DefinitelyPromise:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isPromise"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!isString:function(1)",
          "docComment": "/**\n * Checks if `data` is `Number`\n *\n * @param data - Anything\n *\n * @example\n *\n * const item = { data: 1 } as { data: number } | string if (P.isString(item)) { console.log(\"My name is\", item) }  @category Guard\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isString<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "ts-prime!~data"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefinitelyString",
              "canonicalReference": "ts-prime!~DefinitelyString:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isString"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!keys:function(1)",
          "docComment": "/**\n * Return object keys\n *\n * @param object - object value  @signature P.keys(object)\n *\n * @example\n *\n * P.keys()(object) @data_first  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function keys<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "(object: T) => "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<keyof T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "keys"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!keys:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function keys<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(object: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<keyof T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "keys"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!last:function(1)",
          "docComment": "/**\n * Gets the last element of `array`.\n *\n * @param array - the array\n *\n * @param defaultValue - default value  @signature P.last(array) P.last(array, default)\n *\n * @example\n *\n * P.last([1, 2, 3]) // => 3 P.last([]) // => undefined P.last([], 2) // => 2 P.last([1], 2) // => 1  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function last<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "last"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!last:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function last<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", defaultValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "last"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!map:function(1)",
          "docComment": "/**\n * Map each element of an array using a defined callback function.\n *\n * @param array - The array to map.\n *\n * @param fn - The function mapper.\n *\n * @returns The new mapped array.  @signature P.map(array, fn)  @signature P.map(fn)(array)\n *\n * @example\n *\n * P.map([1, 2, 3], x => x * 2) // => [2, 4, 6] P.pipe([0, 1, 2], P.map(x => x * 2)) // => [2, 4, 6]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function map<T, K>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "K[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "map"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!map:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function map<T, K>(fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => K[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "map"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!map:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace map "
            }
          ],
          "releaseTag": "Public",
          "name": "map",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!map.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "K[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!map.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexed",
                  "canonicalReference": "ts-prime!PredIndexed:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => K[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!map.lazy:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazy: "
                },
                {
                  "kind": "Content",
                  "text": "<T, K>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>) => (value: T, index?: number | undefined, array?: readonly T[] | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<K>"
                }
              ],
              "releaseTag": "Public",
              "name": "lazy",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "ts-prime!map.lazyIndexed:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazyIndexed: "
                },
                {
                  "kind": "Content",
                  "text": "(<T, K>(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "PredIndexedOptional",
                  "canonicalReference": "ts-prime!PredIndexedOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>) => (value: T, index?: number | undefined, array?: readonly T[] | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<K>) & {\n        indexed: true;\n    }"
                }
              ],
              "releaseTag": "Public",
              "name": "lazyIndexed",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!mapRecord:function(1)",
          "docComment": "/**\n * Loops each record element and maps against provided function.\n *\n * @param record - The target object.\n *\n * @param fn - Mapping function.\n *\n * @returns The new record.  @signature P.flatMapRecord(record, fn)  @signature P.flatMapRecord(record, fn)\n *\n * @example\n *\n * P.flatMapRecord({ a: 1, b: 2, c: 3 }, ([k,v]) => [[k, v * 2], [k + \"_abc\", v * 2]]) // => { a: 2, a_abc: 2, b: 4, b_abc: 4, c: 6, c_abc: 6 } P.flatMapRecord({ a: 1, b: 2, c: 3 }, ([k,v]) => [[k, v * 2], [k + \"_abc\", v * 2]]) // => { a: 2, a_abc: 2, b: 4, b_abc: 4, c: 6, c_abc: 6 }  @category Object, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", V>(record: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<[keyof T, T[keyof T]], [K, V]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!mapRecord:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapRecord<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", V extends "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(v: [keyof T, T[keyof T]]) => [K, V]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(record: T) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!mapToObj:function(1)",
          "docComment": "/**\n * Map each element of an array into an object using a defined callback function.\n *\n * @param array - The array to map.\n *\n * @param fn - The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries\n *\n * @returns The new mapped object.  @signature P.mapToObj(array, fn)  @signature P.mapToObj(fn)(array)\n *\n * @example\n *\n * P.mapToObj([1, 2, 3], x => [String(x), x * 2]) // => {1: 2, 2: 4, 3: 6} P.pipe( [1, 2, 3], P.mapToObj(x => [String(x), x * 2]) ) // => {1: 2, 2: 4, 3: 6} P.pipe( [0, 0, 0], P.mapToObj.indexed((x, i) => [i, i]) ) // => {0: 0, 1: 1, 2: 2}  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapToObj<T, K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ", V>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(element: T, index: number, array: readonly T[]) => [K, V]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapToObj"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!mapToObj:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapToObj<T, K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ", V>(fn: "
            },
            {
              "kind": "Content",
              "text": "(element: T, index: number, array: readonly T[]) => [K, V]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapToObj"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!maxBy:function(1)",
          "docComment": "/**\n * Returns a new array containing items that have maximum numeric values defined by `fn` function.\n *\n * @param array - List of items\n *\n * @param fn - Selector function  @signature P.maxBy(arrayOfNumbers)  @signature P.maxBy(array, fn)  @signature P.maxBy(fn)(array)  @signature P.maxBy()(arrayOfNumbers)\n *\n * @example\n *\n * P.maxBy([1,2,3,4,5,6,7,7]) //=> [7] P.maxBy([{ data: 5, score: 2 }, { data: 6, score: 5 }], (q) => q.data * q.score) //=> [{ data: 6, score: 5 }]  @category Number\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maxBy(array: "
            },
            {
              "kind": "Content",
              "text": "readonly number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "maxBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!maxBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maxBy<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "maxBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!maxBy:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maxBy<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "maxBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!maxBy:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maxBy(): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly number[]) => number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [],
          "name": "maxBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!merge:function(1)",
          "docComment": "/**\n * Merges two objects. The same as `Object.assign`. `b` object will override properties of `a`.\n *\n * @param a - the first object\n *\n * @param b - the second object  @signature P.merge(a, b)\n *\n * @example\n *\n * P.merge({ x: 1, y: 2 }, { y: 10, z: 2 }) // => { x: 1, y: 10, z: 2 } @data_first  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function merge<A, B>(a: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "B"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "A & B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "merge"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!merge:function(2)",
          "docComment": "/**\n * Merges two objects. The same as `Object.assign`. `b` object will override properties of `a`.\n *\n * @param b - the second object  @signature P.merge(b)(a)\n *\n * @example\n *\n * P.merge({ y: 10, z: 2 })({ x: 1, y: 2 }) // => { x: 1, y: 10, z: 2 } @data_last  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function merge<A, B>(b: "
            },
            {
              "kind": "Content",
              "text": "B"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(a: A) => A & B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "merge"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!minBy:function(1)",
          "docComment": "/**\n * Returns a new array containing items that have maximum numeric values defined by `fn` function.\n *\n * @param array - List of items\n *\n * @param fn - Selector function  @signature P.minBy(arrayOfNumbers)  @signature P.minBy(array, fn)  @signature P.minBy(fn)(array)  @signature P.minBy()(arrayOfNumbers)\n *\n * @example\n *\n * P.minBy([1,2,3,4,5,6,7,7]) //=> [1] P.minBy([{ data: 5, score: 2 }, { data: 6, score: 5 }], (q) => q.data * q.score) //=> [{ data: 5, score: 2 }]  @category Number, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minBy(array: "
            },
            {
              "kind": "Content",
              "text": "readonly number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "minBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!minBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minBy<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "minBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!minBy:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minBy(): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly number[]) => number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [],
          "name": "minBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!minBy:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minBy<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "minBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!noop:function(1)",
          "docComment": "/**\n * A function that returns always `undefined`.  @signature P.noop()  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function noop(): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "noop"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!normalizeString:function(1)",
          "docComment": "/**\n * Converts characters like ĖČĘĄ -> ecea, removes non letter and non number characters\n *\n * @param str - the string  @signature P.normalizeString(str);\n *\n * @example\n *\n * P.normalizeString(\"Super#@! ===-0- ball %%% cup\") // => super0ballcup @data_first  @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function normalizeString(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "normalizeString"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!omit:function(1)",
          "docComment": "/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @param object - the object\n *\n * @param names - the property names  @signature P.omit(obj, names);  @signature P.omit(names)(obj);\n *\n * @example\n *\n * P.omit({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { b: 2, c: 3 }\n *\n * P.pipe({ a: 1, b: 2, c: 3, d: 4 }, P.omit(['a', 'd'])) // => { b: 2, c: 3 }  @category Object, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function omit<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": ">(object: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", names: "
            },
            {
              "kind": "Content",
              "text": "readonly K[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "names",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "omit"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!omit:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function omit<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": ">(names: "
            },
            {
              "kind": "Content",
              "text": "readonly K[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(object: T) => "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "names",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "omit"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!once:function(1)",
          "docComment": "/**\n * Creates a function that is restricted to invoking `func` once. Repeat calls to the function return the value of the first invocation.\n *\n * @param fn - the function to wrap  @signature P.once(fn)\n *\n * @example\n *\n * const initialize = P.once(createApplication); initialize(); initialize(); // => `createApplication` is invoked once  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function once<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "() => T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "() => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "once"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!partition:function(1)",
          "docComment": "/**\n * Filter the elements of an array that meet the condition specified in a callback function.\n *\n * @param array - The array to filter.\n *\n * @param fn - the callback function.  @signature P.filter(array, fn)  @signature P.filter(fn)(array)\n *\n * @example\n *\n * P.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]\n *\n * P.pipe([1, 2, 3], P.filter(x => x % 2 === 1)) // => [1, 3]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function partition<T, S extends "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(value: T) => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "ts-prime!~value"
            },
            {
              "kind": "Content",
              "text": " is S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[S[], "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, S>[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "partition"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!partition:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function partition<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "partition"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!partition:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function partition<T, S extends "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "(input: T) => "
            },
            {
              "kind": "Reference",
              "text": "input",
              "canonicalReference": "ts-prime!~input"
            },
            {
              "kind": "Content",
              "text": " is S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => [S[], "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, S>[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "partition"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!partition:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function partition<T>(fn: "
            },
            {
              "kind": "Reference",
              "text": "Pred",
              "canonicalReference": "ts-prime!Pred:type"
            },
            {
              "kind": "Content",
              "text": "<T, boolean>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => [T[], T[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "partition"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!path:function(1)",
          "docComment": "/**\n * Gets the value at `path` of `object`\n *\n * @param object - the target object\n *\n * @param path - the path of the property to get  @signature P.path(object, path)  @signature P.path(path)(object)\n *\n * @example\n *\n * P.path({x: { y: 1 }}, ['x', 'y']) // 1 P.path({x: { y: 1 }}, ['y']) // undefined P.pipe({x: { y: { z: { a: [0] }} }}, P.path(\"x.y.z.a.0\".split('.'))) // 0  @category Object, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function path(object: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", path: "
            },
            {
              "kind": "Content",
              "text": "readonly string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "path"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!path:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function path(path: "
            },
            {
              "kind": "Content",
              "text": "readonly (string | number)[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(object: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>) => unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "path"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(1)",
          "docComment": "/**\n * Perform left-to-right function composition.\n *\n * @param value - The initial value.\n *\n * @param operations - the list of operations to apply.  @signature P.pipe(data, op1, op2, op3)\n *\n * @example\n *\n * P.pipe( [1, 2, 3, 4], P.map(x => x * 2), arr => [arr[0] + arr[1], arr[2] + arr[3]], ) // => [6, 14]\n *\n * @data_first  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C, D>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "D"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(4)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C, D, E>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(5)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C, D, E, F>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "F"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 5,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(6)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C, D, E, F, G>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": ", op6: "
            },
            {
              "kind": "Content",
              "text": "(input: F) => G"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "G"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 6,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "parameterName": "op6",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!pipe:function(7)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pipe<A, B, C, D, E, F, G, H>(value: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": ", op1: "
            },
            {
              "kind": "Content",
              "text": "(input: A) => B"
            },
            {
              "kind": "Content",
              "text": ", op2: "
            },
            {
              "kind": "Content",
              "text": "(input: B) => C"
            },
            {
              "kind": "Content",
              "text": ", op3: "
            },
            {
              "kind": "Content",
              "text": "(input: C) => D"
            },
            {
              "kind": "Content",
              "text": ", op4: "
            },
            {
              "kind": "Content",
              "text": "(input: D) => E"
            },
            {
              "kind": "Content",
              "text": ", op5: "
            },
            {
              "kind": "Content",
              "text": "(input: E) => F"
            },
            {
              "kind": "Content",
              "text": ", op6: "
            },
            {
              "kind": "Content",
              "text": "(input: F) => G"
            },
            {
              "kind": "Content",
              "text": ", op7: "
            },
            {
              "kind": "Content",
              "text": "(input: G) => H"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "H"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 7,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "op1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "op2",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "op3",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "op4",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "op5",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "parameterName": "op6",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              }
            },
            {
              "parameterName": "op7",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "H",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pipe"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!PredIndexed:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PredIndexed<T, K> = "
            },
            {
              "kind": "Content",
              "text": "(input: T, index: number, array: readonly T[]) => K"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PredIndexed",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!prettyMs:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function prettyMs(milliseconds: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-prime!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PrettyMs",
              "canonicalReference": "ts-prime!~PrettyMs:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "milliseconds",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "name": "prettyMs"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!prettyTimeDiff:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function prettyTimeDiff(date: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | string"
            },
            {
              "kind": "Content",
              "text": ", from?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "from",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "prettyTimeDiff"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!PromiseValueOf:type",
          "docComment": "/**\n * Extracts Promise value\n *\n * @example\n *\n * export function example(): Promise<number> { ... }\n *\n * type E = PromiseValueOf<ReturnType<typeof example>>\n *\n * // type: number  @category Type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PromiseValueOf<O> = "
            },
            {
              "kind": "Content",
              "text": "O extends "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<infer T> ? T : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PromiseValueOf",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!purry:function(1)",
          "docComment": "/**\n * Creates a function with `data-first` and `data-last` signatures.\n *\n * `purry` is a dynamic function and it's not type safe. It should be wrapped by a function that have proper typings. Refer to the example below for correct usage.\n *\n * @param fn - the function to purry.\n *\n * @param args - the arguments  @signature P.purry(fn, arguments);\n *\n * @example\n *\n * function _findIndex(array, fn) { for (let i = 0; i < array.length; i++) { if (fn(array[i])) { return i; } } return -1; }\n *\n * // data-first function findIndex<T>(array: T[], fn: (item: T) => boolean): number;\n *\n * // data-last function findIndex<T>(fn: (item: T) => boolean): (array: T[]) => number;\n *\n * function findIndex() { return P.purry(_findIndex, arguments); }  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function purry(fn: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", args: "
            },
            {
              "kind": "Reference",
              "text": "IArguments",
              "canonicalReference": "!IArguments:interface"
            },
            {
              "kind": "Content",
              "text": " | readonly any[]"
            },
            {
              "kind": "Content",
              "text": ", lazy?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "lazy",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "purry"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!randomString:function(1)",
          "docComment": "/**\n * Random a non-cryptographic random string from characters a-zA-Z0-9.\n *\n * @param length - the length of the random string  @signature randomString(length)\n *\n * @example\n *\n * randomString(5) // => aB92J  @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function randomString(length: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "length",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "randomString"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!range:function(1)",
          "docComment": "/**\n * Returns a list of numbers from `start` (inclusive) to `end` (exclusive).\n *\n * @param start - the start number\n *\n * @param end - the end number  @signature P.range(start, end)  @signature P.range(end)(start)\n *\n * @example\n *\n * P.range(1, 5) // => [1, 2, 3, 4] P.range(5)(1) // => [1, 2, 3, 4]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function range(start: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", end: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "start",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "end",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "range"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!range:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function range(end: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(start: number) => number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "end",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "range"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!reduce:function(1)",
          "docComment": "/**\n * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n *\n * @param array - the array to reduce\n *\n * @param fn - the callback function\n *\n * @param initialValue - the initial value to use as an accumulator value in the callback function  @signature P.reduce(items, fn, initialValue) P.reduce.indexed(items, fn, initialValue)\n *\n * @example\n *\n * P.reduce([1, 2, 3, 4, 5], (acc, x) => acc + x, 100) // => 115 P.reduce.indexed([1, 2, 3, 4, 5], (acc, x, i, array) => acc + x, 100) // => 115 @data_first  @indexed  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reduce<T, K>(items: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(acc: K, item: T) => K"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "K"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "K"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reduce"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!reduce:function(2)",
          "docComment": "/**\n * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n *\n * @param fn - the callback function\n *\n * @param initialValue - the initial value to use as an accumulator value in the callback function  @signature P.reduce(fn, initialValue)(array)\n *\n * @example\n *\n * P.pipe([1, 2, 3, 4, 5], P.reduce((acc, x) => acc + x, 100)) // => 115 P.pipe([1, 2, 3, 4, 5], P.reduce.indexed((acc, x, i, array) => acc + x, 100)) // => 115 @data_last  @indexed  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reduce<T, K>(fn: "
            },
            {
              "kind": "Content",
              "text": "(acc: K, item: T) => K"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "K"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(items: readonly T[]) => K"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reduce"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!reduce:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace reduce "
            }
          ],
          "releaseTag": "Public",
          "name": "reduce",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!reduce.indexed:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(array: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": ", fn: "
                },
                {
                  "kind": "Content",
                  "text": "(acc: K, item: T, index: number, items: T[]) => K"
                },
                {
                  "kind": "Content",
                  "text": ", initialValue: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "initialValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            },
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!reduce.indexed:function(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function indexed<T, K>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(acc: K, item: T, index: number, items: T[]) => K"
                },
                {
                  "kind": "Content",
                  "text": ", initialValue: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(array: readonly T[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "initialValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "indexed"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!retry:function(1)",
          "docComment": "/**\n * Retry promise function\n *\n * @param errorHandler - Logic when to retry\n *\n * @param fn - the callback function  @signature P.retry(fn, errorHandler)\n *\n * @example\n *\n * P.retry(async () => { await delay(1000) throw new Error(\"Failed!\") }, ({ count }) => count < 10) // Retry function 10 times  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function retry<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(errorHandler: "
            },
            {
              "kind": "Content",
              "text": "(stats: {\n    err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    count: number;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean> | boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(fn: E) => E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "errorHandler",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "retry"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!retry:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function retry<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", errorHandler: "
            },
            {
              "kind": "Content",
              "text": "(stats: {\n    err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    count: number;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean> | boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "errorHandler",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "retry"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!reverse:function(1)",
          "docComment": "/**\n * Reverses array.\n *\n * @param array - the array  @signature P.reverse(arr);  @signature P.reverse()(array);\n *\n * @example\n *\n * P.reverse([1, 2, 3]) // [3, 2, 1] P.reverse()([1, 2, 3]) // [3, 2, 1]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reverse<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reverse"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!reverse:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reverse<T>(): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reverse"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!setPath:function(1)",
          "docComment": "/**\n * Dynamically sets object path\n *\n * @param target - Target object\n *\n * @param path - Path in object\n *\n * @param value - On final object element  @signature P.setPath(obj, path, value)\n *\n * @example\n *\n * P.setPath({ data: {} }, \"data.value.max\", 100) // { data: { value: { max: 100 } } }  @category Object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPath(target: "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n} | "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ", path: "
            },
            {
              "kind": "Content",
              "text": "(string | number)[]"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setPath"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!slugify:function(1)",
          "docComment": "/**\n * Converts any string to slug\n *\n * @param str - the string  @signature P.slugify(str);\n *\n * @example\n *\n * P.slugify(\"Super ball cup\") // => super-ball-cup  @category String\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function slugify(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "slugify"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!sort:function(1)",
          "docComment": "/**\n * Sorts an array. The comparator function should accept two values at a time and return a negative number if the first value is smaller, a positive number if it's larger, and zero if they are equal. Sorting is based on a native `sort` function. It's not guaranteed to be stable.\n *\n * @param items - the array to sort\n *\n * @param cmp - the comparator function  @signature P.sort(items, cmp)  @signature P.sort(cmp)(items)\n *\n * @example\n *\n * P.sort([4, 2, 7, 5], (a, b) => a - b) // => [2, 4, 5, 7] P.pipe([4, 2, 7, 5], P.sort((a, b) => a - b)) // => [2, 4, 5, 7]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sort<T>(items: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", cmp: "
            },
            {
              "kind": "Content",
              "text": "(a: T, b: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "cmp",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "sort"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!sort:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sort<T>(cmp: "
            },
            {
              "kind": "Content",
              "text": "(a: T, b: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(items: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "cmp",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "sort"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!sortBy:function(1)",
          "docComment": "/**\n * Sorts the list according to the supplied function in ascending order. Sorting is based on a native `sort` function. It's not guaranteed to be stable.\n *\n * @param array - the array to sort\n *\n * @param fn - the mapping function  @signature P.sortBy(array, fn)  @signature P.sortBy(fn)(array)\n *\n * @example\n *\n * P.sortBy( [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }], x => x.a ) // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]\n *\n * P.pipe( [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }], P.sortBy(x => x.a) ) // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sortBy<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => "
            },
            {
              "kind": "Reference",
              "text": "SortByProp",
              "canonicalReference": "ts-prime!SortByProp:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "sortBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!sortBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sortBy<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => "
            },
            {
              "kind": "Reference",
              "text": "SortByProp",
              "canonicalReference": "ts-prime!SortByProp:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "sortBy"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!SortByProp:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SortByProp = "
            },
            {
              "kind": "Reference",
              "text": "SortValue",
              "canonicalReference": "ts-prime!SortValue:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ComplexSort",
              "canonicalReference": "ts-prime!ComplexSort:type"
            },
            {
              "kind": "Content",
              "text": " | ("
            },
            {
              "kind": "Reference",
              "text": "SortValue",
              "canonicalReference": "ts-prime!SortValue:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ComplexSort",
              "canonicalReference": "ts-prime!ComplexSort:type"
            },
            {
              "kind": "Content",
              "text": ")[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SortByProp",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "ts-prime!SortValue:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SortValue = "
            },
            {
              "kind": "Content",
              "text": "boolean | number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SortValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!splitAt:function(1)",
          "docComment": "/**\n * Splits a given array at a given index.\n *\n * @param array - the array to split\n *\n * @param index - the index to split at  @signature P.splitAt(array, index)\n *\n * @example\n *\n * P.splitAt([1, 2, 3], 1) // => [[1], [2, 3]] P.splitAt([1, 2, 3, 4, 5], -1) // => [[1, 2, 3, 4], [5]] @data_first  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function splitAt<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", index: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[T[], T[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "index",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "splitAt"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!splitAt:function(2)",
          "docComment": "/**\n * Splits a given array at a given index.\n *\n * @param array - the array to split\n *\n * @param index - the index to split at  @signature P.splitAt(index)(array)\n *\n * @example\n *\n * P.splitAt(1)([1, 2, 3]) // => [[1], [2, 3]] P.splitAt(-1)([1, 2, 3, 4, 5]) // => [[1, 2, 3, 4], [5]] @data_last  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function splitAt<T>(index: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => [T[], T[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "index",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "splitAt"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!splitWhen:function(1)",
          "docComment": "/**\n * Splits a given array at the first index where the given predicate returns true.\n *\n * @param array - the array to split\n *\n * @param fn - the predicate  @signature P.splitWhen(array, fn)  @signature P.splitWhen(fn)(array)\n *\n * @example\n *\n * P.splitWhen([1, 2, 3], x => x === 2) // => [[1], [2, 3]] P.splitWhen(x => x === 2)([1, 2, 3]) // => [[1], [2, 3]]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function splitWhen<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[T[], T[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "splitWhen"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!splitWhen:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function splitWhen<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => [T[], T[]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "splitWhen"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!stats:function(1)",
          "docComment": "/**\n * Calculate objet numeric statistics\n *\n * @param data - Array of data\n *\n * @param fn - Function that maps to numeric data  @signature P.stats(data, fn)  @signature P.pipe(data,P.stats(fn))\n *\n * @example\n *\n * P.stats([{ data: 1 }, { data: 2 }, { data: 3 }], (q) => q.data) // => { sum: 6, middle: 2, min: 1, max: 3, arithmetic_mean: 2, geometric_mean: 6, median: 2, quadratic_mean: 14 } P.pipe([1, 2, 3], P.stats((q) => q)) // => { sum: 6, middle: 2, min: 1, max: 3, arithmetic_mean: 2, geometric_mean: 6, median: 2, quadratic_mean: 14 }  @category Number, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stats<T>(data: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Stats",
              "canonicalReference": "ts-prime!Stats:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "stats"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!stats:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stats(data: "
            },
            {
              "kind": "Content",
              "text": "readonly number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Stats",
              "canonicalReference": "ts-prime!Stats:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "stats"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!stats:function(3)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stats<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => "
            },
            {
              "kind": "Reference",
              "text": "Stats",
              "canonicalReference": "ts-prime!Stats:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "stats"
        },
        {
          "kind": "Interface",
          "canonicalReference": "ts-prime!Stats:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Stats "
            }
          ],
          "releaseTag": "Public",
          "name": "Stats",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#arithmetic_mean:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "arithmetic_mean: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "arithmetic_mean",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#geometric_mean:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometric_mean: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "geometric_mean",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#max:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#median:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "median",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#middle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "middle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "middle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#min:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#quadratic_mean:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quadratic_mean: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "quadratic_mean",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ts-prime!Stats#sum:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sum: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!take:function(1)",
          "docComment": "/**\n * Returns the first `n` elements of `array`.\n *\n * @param array - the array\n *\n * @param n - the number of elements to take  @signature P.take(array, n)  @signature P.take(n)(array)\n *\n * @example\n *\n * P.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3] P.pipe([1, 2, 3, 4, 3, 2, 1], P.take(n)) // => [1, 2, 3]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function take<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "take"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!take:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function take<T>(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "take"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!take:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace take "
            }
          ],
          "releaseTag": "Public",
          "name": "take",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!take.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy<T>(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!takeWhile:function(1)",
          "docComment": "/**\n * Returns elements from the array until predicate returns false.\n *\n * @param array - the array\n *\n * @param fn - the predicate  @signature P.takeWhile(array, fn)  @signature P.takeWhile(fn)(array)\n *\n * @example\n *\n * P.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3] P.pipe([1, 2, 3, 4, 3, 2, 1], P.takeWhile(x => x !== 4)) // => [1, 2, 3]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function takeWhile<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "takeWhile"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!takeWhile:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function takeWhile<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "takeWhile"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!throttle:function(1)",
          "docComment": "/**\n * The Debounce technique allow us to “group” multiple sequential calls in a single one.  @description You can find great article that explains how throttle works [here](https://css-tricks.com/debouncing-throttling-explained-examples/)\n *\n * @param func - Any provided function\n *\n * @param debounceTimeMs - duration in milliseconds  @signature P.throttle(func, throttleTimeMs)\n *\n * @example\n *\n * // Execute log P.throttle(console.log, 1000)  @category Function\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function throttle<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(func: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", throttleTimeMs: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "throttleTimeMs",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "throttle"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!throttle:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function throttle<E extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(throttleTimeMs: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(func: E) => E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "throttleTimeMs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "throttle"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!timeout:function(1)",
          "docComment": "/**\n * Prevents promise to execute longer than X ms\n *\n * @param fn - The function to invoke.\n *\n * @param maxDuration - Duration in milliseconds\n *\n * @throws\n *\n * If provided function executes longer than `maxDuration` milliseconds  @signature P.timeout(fn, milliseconds)  @signature P.timeout(milliseconds)(fn)\n *\n * @example\n *\n * const req = P.timeout(request, 500) req({ ... }) // Will throw if function executes longer than 500ms  @category Utility, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function timeout<I extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ", R>(fn: "
            },
            {
              "kind": "Content",
              "text": "(...args: I) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": ", maxDuration: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(...args: I) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "parameterName": "maxDuration",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "timeout"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!timeout:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function timeout<I extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ", R>(maxDuration: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(fn: (...args: I) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>) => (...args: I) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "maxDuration",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "timeout"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!times:function(1)",
          "docComment": "/**\n * Calls an input function `n` times, returning an array containing the results of those function calls.\n *\n * @description `fn` is passed one argument: The current value of `n`, which begins at `0` and is gradually incremented to `n - 1`.\n *\n * @param count - A value between `0` and `n - 1`. Increments after each function call.\n *\n * @param fn - The function to invoke. Passed one argument, the current value of `n`.  @return An array containing the return values of all calls to `fn`.\n *\n * @throws\n *\n * If count is less than 0  @signature P.times(5, fn)  @signature P.times(fn)(count)\n *\n * @example\n *\n * P.times(identity, 5); //=> [0, 1, 2, 3, 4]  @category Utility, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function times<T>(count: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(n: number) => T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "count",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "times"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!times:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function times<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(n: number) => T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(count: number) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "times"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toDate:function(1)",
          "docComment": "/**\n * Parses date and if success returns Date object otherwise returns undefined  @description If for example we want parse data new Date(\"asd\") this will be invalid date and javascript will not return exception. So for every date parsing we need to do additional validity checks\n *\n * @param data - Anything\n *\n * @example\n *\n * P.toFloat(\"1.378998\") // = 1.378998 P.toFloat(\"test\") // undefined P.toFloat(\"test\", 0) // 0  @category Number\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toDate(data: "
            },
            {
              "kind": "Content",
              "text": "string | number | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "toDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toDate:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toDate(data: "
            },
            {
              "kind": "Content",
              "text": "string | number | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ", defaultValue: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "toDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toFloat:function(1)",
          "docComment": "/**\n * Parses string to `floating` number  @description This function litle bit different than parseFloat. First of all it can return undefined if float parsing is unsuccessful. Regular parseFloat return `NaN` this is really misleading\n *\n * @param data - Anything\n *\n * @example\n *\n * P.toFloat(\"1.378998\") // = 1.378998 P.toFloat(\"test\") // undefined P.toFloat(\"test\", 0) // 0  @category Number\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toFloat(data: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "toFloat"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toFloat:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toFloat<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", defaultValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "toFloat"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toInt:function(1)",
          "docComment": "/**\n * Parses string to `int` number  @description This function litle bit different than parseInt. First of all it can return undefined if int parsing is unsuccessful. Regular parseInt cant return `NaN` and this is really misleading\n *\n * @param data - Anything\n *\n * @example\n *\n * P.toInt(\"1.378998\") // = 1 P.toInt(\"test\") // undefined P.toInt(\"test\", 0) // 0  @category Number\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toInt(data: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "toInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!toInt:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toInt<T extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", defaultValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "toInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!type:function(1)",
          "docComment": "/**\n * Gives a single-word string description of the (native) type of a value, returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not attempt to distinguish user Object types any further, reporting them all as 'Object'.\n *\n * @param val -  @signature P.type(obj)\n *\n * @example\n *\n * P.type({}); //=> \"Object\" P.type(1); //=> \"Number\" P.type(false); //=> \"Boolean\" P.type('s'); //=> \"String\" P.type(null); //=> \"Null\" P.type([]); //=> \"Array\" P.type(/[A-z]/); //=> \"RegExp\" P.type(() => {}); //=> \"Function\" P.type(undefined); //=> \"Undefined\" P.type(new Date()); //=> \"Date\" P.type(new MyClass()); // => \"MyClass\"  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function type(val: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "val",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "type"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!uniq:function(1)",
          "docComment": "/**\n * Returns a new array containing only one copy of each element in the original list. Elements are compared by reference using Set. Note: In `pipe`, use `uniq()` form instead of `uniq`. Otherwise, the inferred type is lost.\n *\n * @param array - List of items  @signature P.uniq(array)  @signature P.pipe(array, P.uniq())\n *\n * @example\n *\n * P.uniq([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7] P.pipe( [1, 2, 2, 5, 1, 6, 7], // only 4 iterations P.uniq(), P.take(3) ) // => [1, 2, 5]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniq<T>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "uniq"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!uniq:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniq<T>(): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "uniq"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "ts-prime!uniq:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace uniq "
            }
          ],
          "releaseTag": "Public",
          "name": "uniq",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "ts-prime!uniq.lazy:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lazy(): "
                },
                {
                  "kind": "Content",
                  "text": "(value: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "LazyResult",
                  "canonicalReference": "ts-prime!LazyResult:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "lazy"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!uniqBy:function(1)",
          "docComment": "/**\n * Returns a new array containing only one copy of each element in the original list transformed by a function. Elements are compared by reference using Set.\n *\n * @param array - List of items  @signature P.uniqBy(fn, array)  @signature P.pipe(array, P.uniqBy(fn))\n *\n * @example\n *\n * P.uniq(obj => obj.n, [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}]) // => [{n: 1}, {n: 2}, {n: 5}, {n: 6}, {n: 7}] P.pipe( [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}], // only 4 iterations P.uniq(obj => obj.n), P.take(3) ) // => [{n: 1}, {n: 2}, {n: 5}]  @category Array, Pipe\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniqBy<T, K>(array: "
            },
            {
              "kind": "Content",
              "text": "readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", transformer: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => K"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "transformer",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "uniqBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!uniqBy:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniqBy<T, K>(transformer: "
            },
            {
              "kind": "Content",
              "text": "(item: T) => K"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(array: readonly T[]) => T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "transformer",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "uniqBy"
        },
        {
          "kind": "Class",
          "canonicalReference": "ts-prime!UnknownError:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UnknownError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "UnknownError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "ts-prime!UnknownError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `UnknownError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "ts-prime!UnknownError#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "ts-prime!UnknownError#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name = \"UnknownError\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!urlJoin:function(1)",
          "docComment": "/**\n * Joins two url paths\n *\n * @param url - Valid url  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function urlJoin(...concat: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "concat",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "urlJoin"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!urlToRelative:function(1)",
          "docComment": "/**\n * Converts url to relative url\n *\n * @param url - Valid url  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function urlToRelative(url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "urlToRelative"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!uuidv4:function(1)",
          "docComment": "/**\n * Generates non cryptographic UUID\n *\n * @example\n *\n * P.uuidv4() //=> aecad060-0bb7-4567-af08-4dfe5f46d130  @category Utility\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uuidv4(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "uuidv4"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!values:function(1)",
          "docComment": "/**\n * Return object values\n *\n * @param object - object value  @signature P.values(object)\n *\n * @example\n *\n * P.values()(object) @data_first  @category Array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function values<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "(object: T) => "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "values"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!values:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function values<T extends "
            },
            {
              "kind": "Content",
              "text": "{\n    [k: string]: unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ">(object: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "values"
        },
        {
          "kind": "Function",
          "canonicalReference": "ts-prime!waitUntilDefined:function(1)",
          "docComment": "/**\n * Function repeats provided call until it returns not null or undefined value. If this process exceeds `maxDurationMs` function will throw of those function calls.\n *\n * @param fn - The function to invoke.\n *\n * @param maxDurationMs - Max waiting duration\n *\n * @example\n *\n * const result = await waitUntilDefined(() => document.body.getElementById(\"#app\"))  @category Utility\n *\n * @throws\n *\n * If if fn does not return not nil value in given time frame\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function waitUntilDefined<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "() => T | undefined"
            },
            {
              "kind": "Content",
              "text": ", maxDurationMs: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "maxDurationMs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "waitUntilDefined"
        }
      ]
    }
  ]
}
